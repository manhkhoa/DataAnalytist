<?php

/**
 * @file
 * The password_reset module allows for passwords to be reset without involving
 * e-mail addresses through the use of security questions. This module would
 * typically be used on sites that do not require users to enter their e-mail
 * addresses - something that is possible only with a core hack, albeit a minor
 * one.
 *
 * @todo
 *   - Allow for multiple questions per user and choose the one to be displayed
 *     at random.
 *   - Allow more than one question to be answered by the user during the check.
 *   - Consider breaking module up into a security question component and a
 *     password reset component.
 *   - Allow for the security question and/or password checks to be triggered
 *     for sensitive areas of the site.
 *   - Possibly allow users to add their own custom question and answer.
 *   - Check if other types besides text questions can be used.
 *
 * @author Karthik Kumar ( http://drupal.org/user/21209 )
 */

/**
 * Implements hook_help().
 */
function password_reset_help($path, $arg) {
  switch ($path) {
    case 'admin/config/people/password-reset':
      return t('<p>The Password reset module allows users to set up a security
        question and answer which can, at a later date, be used to identify them
        in case they are unable to access their account.</p>
        <p>The following table lists the available security questions that the
        user can choose from. It tabulates the actual questions along with the
        number of users using them and also provides options to <em>Edit</em> or
        <em>Delete</em> them as necessary. The <em>Empty</em> operation forces
        any users using the associated question to make their choice again.</p>
        <p>Additional questions can be added via the <em>Add question</em> tab.
        Further configuration options for this module are available under the
        <em>Settings</em> tab.</p>');
    case 'admin/config/people/password-reset/edit/%':
      return t('<p>If this question is being used by any users, then certain
        fields can no longer be changed to ensure that existing answers are not
        invalidated. To access these fields, first use the <em>Empty</em> option
        via the question manager table to clear use of this question.</p>');
  }
}

/**
 * Implements hook_menu().
 */
function password_reset_menu() {
  global $user;

  $items = array();

  $items['admin/config/people/password-reset'] = array(
    'title' => 'Password reset',
    'description' => 'Configure security questions for the password_reset module.',
    'page callback' => 'password_reset_admin_questions',
    'access arguments' => array('administer site configuration'),
    'file' => 'password_reset.admin.inc'
  );
  $items['admin/config/people/password-reset/list'] = array(
    'title' => 'List',
    'page callback' => 'password_reset_admin_questions',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'password_reset.admin.inc'
  );
  $items['admin/config/people/password-reset/add'] = array(
    'title' => 'Add question',
    'description' => 'Add a security question.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('password_reset_admin_edit'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'password_reset.admin.inc'
  );
  $items['admin/config/people/password-reset/edit/%'] = array(
    'title' => 'Edit question',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('password_reset_admin_edit', 5),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'password_reset.admin.inc'
  );
  $items['admin/config/people/password-reset/delete/%'] = array(
    'title' => 'Delete question',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('password_reset_admin_delete', 5),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'password_reset.admin.inc'
  );
  $items['admin/config/people/password-reset/empty/%'] = array(
    'title' => 'Empty question',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('password_reset_admin_empty', 5),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'password_reset.admin.inc'
  );
  $items['admin/config/people/password-reset/settings'] = array(
    'title' => 'Settings',
    'description' => 'Manage the Password reset module configuration options.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('password_reset_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'password_reset.admin.inc',
    'weight' => 10
  );


  // Custom
  $items['send-reset-link'] = array(
    'title' => 'Send Reset Link',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('send_reset_link',TRUE),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function password_reset_menu_alter(&$items) {
  unset($items['user/password']['file']);
  $items['user/password']['title'] = 'Recover password';
  $items['user/password']['page arguments'][0] = 'password_reset_form';
  $items['user/password']['access callback'] = 'user_is_anonymous';
}

/**
 * Implements hook_form_alter().
 */
function password_reset_form_alter(&$form, &$form_state, $form_id) {
  
	switch ($form_id) {
    case 'user_profile_form':

      drupal_add_js(drupal_get_path('module', 'password_reset') . '/password_reset.js');

      //Hidden option has selected in before questions
       drupal_add_js ( 'jQuery(document).ready(function(){
    

    var first_value_edit = jQuery("#edit-password-reset-first-question option:selected").val();
    var second_value_edit = jQuery("#edit-password-reset-second-question option:selected").val();
    var third_value_edit = jQuery("#edit-password-reset-third-question option:selected").val();
    if(first_value_edit != ""){
      jQuery("#edit-password-reset-second-question option[value=" + first_value_edit + "]").remove();
      jQuery("#edit-password-reset-third-question option[value=" + first_value_edit + "]").remove();
    }  
    if(second_value_edit != ""){
      jQuery("#edit-password-reset-first-question option[value=" + second_value_edit + "]").remove();
      jQuery("#edit-password-reset-third-question option[value=" + second_value_edit + "]").remove();
    }
    if(third_value_edit != ""){
      jQuery("#edit-password-reset-first-question option[value=" + third_value_edit + "]").remove();
      jQuery("#edit-password-reset-second-question option[value=" + third_value_edit + "]").remove();
    }
    
        
    jQuery("select").focus(function () {
      previous = jQuery("option:selected", this);
      
    }).change(function() {
      var current_select = jQuery(this).attr("id");
      var current = jQuery(this).val();
      jQuery("select").each(function(){
        if(previous.val() != ""){
          jQuery(this).append(jQuery("<option>", { 
            value: previous.val(),
            text : previous.text() 
          }));
        }

        if(current_select != jQuery(this).attr("id")){

          jQuery(this).children("option").each(function(){
            if (jQuery(this).val() == current){
              jQuery(this).remove();
              
            }
          }); 
        }
        
      });
      });
    
      });
      ' , 'inline' );

      password_reset_form_inject($form);

      // Track fields for the password field's description text.
      $protected_values = array('pass' => t('Password'));

      // We have to jump through a bunch of hoops to reuse the password
      // verification system in core.
      if (isset($form['account']['current_pass_required_values']) && _password_reset_variable_get('password_verify')) {
        // Since 'current_pass_required_values' does not allow a nested
        // element, we create a temporary alternative.
        $form['password_reset_answer'] = array('#type' => 'value', '#value' => '');
        // Add our element to the verification queue.
        $form['account']['current_pass_required_values']['#value']['password_reset_answer'] = t('Password reset question');
        // We have a few more jumps to go in a validate function that needs to
        // be triggered before those of the user module.
        $form['#validate'] = array('password_reset_confirm_password_validate') + $form['#validate'];

        // Add to protected values array which is used in the password field's
        // description.
        $protected_values['reset'] = t('Security question');
      }

      $question = password_reset_user_question_get($form['#user']->uid);
      $form['password_reset']['#weight'] = 98;
			
      // Do not make the question and answer fields compulsory for admins.
      $required = !($question || _password_reset_user_admin_check($form));
      $form['password_reset']['question']['#required'] = $required;
      $form['password_reset']['answer']['#required'] = $required;

      // Add class required
      $form['password_reset']['first_question']['#attributes']['class'] = array('validate[required]');
      $form['password_reset']['second_question']['#attributes']['class'] = array('validate[required]');
      $form['password_reset']['third_question']['#attributes']['class'] = array('validate[required]');

      $form['password_reset']['first_answer']['#attributes']['class'] = array('validate[required]');
      $form['password_reset']['second_answer']['#attributes']['class'] = array('validate[required]');
      $form['password_reset']['third_answer']['#attributes']['class'] = array('validate[required]');

      if ($question) {
        $form['password_reset']['#attributes']['class'] = array('password-reset-question-set');
				
        $form['password_reset']['first_qruid_hidden']['#value'] = isset($question[0])?$question[0]->qruid:'';
				$form['password_reset']['first_question']['#default_value'] = isset($question[0])?$question[0]->qid:'';
        $form['password_reset']['first_question']['#description'] = t('Your chosen question.');
        $form['password_reset']['first_answer']['#description'] = t('Your answer for the chosen question has <strong>already</strong> been saved. Add another answer only if you wish to overwrite the existing data.');
        $form['password_reset']['first_answer']['#default_value'] = isset($question[0])?$question[0]->answer:'';
				
				$form['password_reset']['second_qruid_hidden']['#value'] = isset($question[1])?$question[1]->qruid:'';
				$form['password_reset']['second_question']['#default_value'] = isset($question[1])?$question[1]->qid:'';
        $form['password_reset']['second_question']['#description'] = t('Your chosen question.');
        $form['password_reset']['second_answer']['#description'] = t('Your answer for the chosen question has <strong>already</strong> been saved. Add another answer only if you wish to overwrite the existing data.');
        $form['password_reset']['second_answer']['#default_value'] = isset($question[1])?$question[1]->answer:'';
				 
				$form['password_reset']['third_qruid_hidden']['#value'] = isset($question[2])?$question[2]->qruid:'';
				$form['password_reset']['third_question']['#default_value'] = isset($question[2])?$question[2]->qid:'';
        $form['password_reset']['third_question']['#description'] = t('Your chosen question.');
        $form['password_reset']['third_answer']['#description'] = t('Your answer for the chosen question has <strong>already</strong> been saved. Add another answer only if you wish to overwrite the existing data.');
        $form['password_reset']['third_answer']['#default_value'] = isset($question[2])?$question[2]->answer:'';
				 
				// Boolean to indicate if this is to be an INSERT or an UPDATE query.
        $form['password_reset']['update'] = array('#type' => 'value', '#value' => 1);
      }

      

      // The e-mail field is disabled. The fake address is to be used.
      if (!_password_reset_variable_get('email_profile')) {
        $mail = $form['account']['mail']['#default_value'];
        unset($form['account']['mail']);
        $form['account']['mail'] = array('#type' => 'value', '#value' => $mail);
      }
      elseif (!_password_reset_variable_get('email_registration')) {
        // We are dealing with a possible fake address here. It would be ideal
        // to make this optionally 'required'. But that would involve more
        // jugglery as the user module validates the address everytime just as
        // with the register function.
        $mail = $form['account']['mail']['#default_value'];
        if (stristr($mail, 'password_reset_fake')) {
          $form['account']['mail']['#default_value'] = '';
        }

        // Add to protected values array which is used in the password field's
        // description.
        $protected_values['mail'] = $form['account']['mail']['#title'];
      }

      // The #access is FALSE when the form is being viewed by a person
      // resetting his account via a one-time login URL.
      if (isset($form['account']['current_pass']) && $form['account']['current_pass']['#access']) {
        switch (count($protected_values)) {
          case 1:
            $form['account']['current_pass']['#description'] = t('Enter your current password to change the %pass.', array('%pass' => $protected_values['pass']));
            break;
          case 2:
            if (isset($protected_values['mail'])) {
              $form['account']['current_pass']['#description'] = t('Enter your current password to change the %pass or %mail.', array('%mail' => $protected_values['mail'], '%pass' => $protected_values['pass']));
            }
            else {
              $form['account']['current_pass']['#description'] = t('Enter your current password to change the %pass or %reset.', array('%reset' => $protected_values['reset'], '%pass' => $protected_values['pass']));
            }
            break;
          case 3:
            $form['account']['current_pass']['#description'] = t('Enter your current password to change the %pass, %mail or %reset.', array('%mail' => $protected_values['mail'], '%reset' => $protected_values['reset'], '%pass' => $protected_values['pass']));
            break;
        }
      }
      break;
    case 'user_register_form':
      if (_password_reset_variable_get('registration_form')) {
        password_reset_form_inject($form);
      }

      if (!_password_reset_variable_get('email_registration')) {
        // We disable e-mail verification every time just in case the admin has
        // gone on a meddling rampage. In any event, the e-mails go to a dead
        // address.
        variable_set('user_email_verification', FALSE);

        unset($form['account']['mail']);
        $form['account']['mail'] = array('#type' => 'value', '#value' => _password_reset_generate_fake_mail());
        $form['#submit'][] = 'password_reset_fake_mail_submit';
      }
      break;
  }

//Check validate for security questions	
	drupal_add_js('
		
		function question_validate() {
			var first_question =  jQuery("#edit-password-reset-first-question").val();
			var second_question =  jQuery("#edit-password-reset-second-question").val();
			var third_question =  jQuery("#edit-password-reset-third-question").val();
			
			if((first_question != "") && (second_question != "") && (third_question != "")) {
				if((first_question == second_question) || (second_question == third_question) || (third_question == first_question)) {
					alert("Three questions must be different!");
					return false;
				}
			}
		}
	',array( 'type' => 'inline') );
	
	if($form_id == 'user_profile_form') {
		$form['actions']['submit']['#attributes'] = array('onclick' => 'return question_validate();');
	}
}

/**
 * Hacks to reuse the password verification system provided by user.module.
 */
function password_reset_confirm_password_validate($form, &$form_state) {
  // $form['account']['current_pass_required_values'] is not set if an admin is
  // modifying an unprivileged account.
  if (isset($form['account']['current_pass_required_values']) && _password_reset_variable_get('password_verify')) {
    // The user module compares the form value with the user object to check if
    // the value (mail) has actually changed.
    $form['#user']->password_reset_answer = '';
    // Set the value of our temporary element to the current answer.
    // N.B. The value is trimmed in user_validate_current_pass().
    form_set_value($form['password_reset_answer'], $form_state['values']['password_reset']['answer'], $form_state);
  }
}

/**
 * Validate the password_reset user and registration form submission.
 * There are a few different scenarios to take care of during creation,
 * validation and submission:
 *   - User is admin, account is normal, question is new.
 *   - User is admin, account is normal, question is an update.
 *   - User is admin, account is his own, question is new.
 *   - User is admin, account is his own, question is an update.
 *   - User is normal, account is his own, question is new.
 *   - User is normal, account is his own, question is an update.
 *
 * When question is an update or if the user is an admin looking at some other
 * user's account, the form should go through even with an empty answer field.
 */
function password_reset_user_form_validate($form, &$form_state) {
  $form_values = $form_state['values']['password_reset'];
  $first_answer = _password_reset_answer_sanitise($form_values['first_answer']);
	$second_answer = _password_reset_answer_sanitise($form_values['second_answer']);
	$third_answer = _password_reset_answer_sanitise($form_values['third_answer']);

  // Do not make the question and answer fields compulsory for admins.
  // Allow admins to bypass only if the answer field is empty.
  $required = TRUE;
  if ($first_answer == '' && $form['#form_id'] == 'user_profile_form') {
    $required = !(isset($form_values['update']) || _password_reset_user_admin_check($form));
  }
	
	if ($second_answer == '' && $form['#form_id'] == 'user_profile_form') {
    $required = !(isset($form_values['update']) || _password_reset_user_admin_check($form));
  }
	
	if ($third_answer == '' && $form['#form_id'] == 'user_profile_form') {
    $required = !(isset($form_values['update']) || _password_reset_user_admin_check($form));
  }

  if ($required && isset($form_values['first_question']) && isset($form_values['second_question']) && isset($form_values['third_question'])) {
    $error = FALSE;

    $first_question = password_reset_question_get($form_values['first_question']);
		$second_question = password_reset_question_get($form_values['second_question']);
		$third_question = password_reset_question_get($form_values['third_question']);
    if ($first_question->answer_length > drupal_strlen($first_answer) || $second_question->answer_length > drupal_strlen($second_answer) || $third_question->answer_length > drupal_strlen($third_answer)) {
      $error = TRUE;
      form_set_error('password_reset][first_answer', t('The provided answer is too short. This question requires an answer which is at least %length characters in length.', array('%length' => $first_question->answer_length)));
			form_set_error('password_reset][second_answer', t('The provided answer is too short. This question requires an answer which is at least %length characters in length.', array('%length' => $second_question->answer_length)));
			form_set_error('password_reset][third_answer', t('The provided answer is too short. This question requires an answer which is at least %length characters in length.', array('%length' => $third_question->answer_length)));
    }

    if (!empty($first_question->regex) && !_password_reset_regex_match($first_question->regex, $first_answer)) {
      $error = TRUE;
      form_set_error('password_reset][first_answer', t('%message', array('%message' => $first_question->regex_message)));
    }

    // If there's an answer validation error, then let the JS know so it can
    // unhide the answer field by default.
    if ($error) {
      drupal_add_js(array('password_reset' => array('invalid_answer' => 1)), 'setting');
    }
  }
}

/**
 * Process the password_reset user and registration form submission.
 */
function password_reset_user_form_submit($form, &$form_state) {
  
	$form_values = $form_state['values']['password_reset'];
  $first_answer = _password_reset_answer_sanitise($form_values['first_answer']);
	$second_answer = _password_reset_answer_sanitise($form_values['second_answer']);
	$third_answer = _password_reset_answer_sanitise($form_values['third_answer']);

  // Only save answer if one has been given to ensure we do not overwrite
  // existing entries.
  if ($form_values['first_question'] && !empty($first_answer) && $form_values['second_question'] && !empty($second_answer) && $form_values['third_question'] && !empty($third_answer)) {
    $first_answer = _password_reset_answer_encase($first_answer, $form_values['first_question']);
		$second_answer = _password_reset_answer_encase($second_answer, $form_values['second_question']);
		$third_answer = _password_reset_answer_encase($third_answer, $form_values['third_question']);
	 $first_record = array(
      'qruid' => $form_values['first_qruid_hidden'],
			'uid' => $form_state['user']->uid,
      'qid' => $form_values['first_question'],
      'answer' => $first_answer
    );
		
		$second_record = array(
      'qruid' => $form_values['second_qruid_hidden'],
			'uid' => $form_state['user']->uid,
      'qid' => $form_values['second_question'],
      'answer' => $second_answer
    );
		
		$third_record = array(
			'qruid' => $form_values['third_qruid_hidden'],
      'uid' => $form_state['user']->uid,
      'qid' => $form_values['third_question'],
      'answer' => $third_answer
    );
		
		drupal_add_js('
		
		');
	
    password_reset_answer_add($first_record, isset($form_values['update']) ? 'qruid' : array());
		password_reset_answer_add($second_record, isset($form_values['update']) ? 'qruid' : array());
		password_reset_answer_add($third_record, isset($form_values['update']) ? 'qruid' : array());
  }
}

/**
 * Hacks to work around the compulsory e-mail address requirement.
 */
function password_reset_fake_mail_submit($form, &$form_state) {
  // Vet drupal_get_message to remove message with traces of the word e-mail.
  $messages = drupal_get_messages(NULL, FALSE);
  drupal_get_messages(NULL, TRUE);

  if (isset($messages['status'])) {
    foreach ($messages['status'] as $id => $message) {
      if (stristr($message, t('e-mail'))) {
        unset($messages['status'][$id]);
      }
    }
  }

  // Readd messages.
  foreach ($messages as $type => $list) {
    foreach ($list as $message) {
      drupal_set_message($message, $type);
    }
  }
}

/**
 * Implements hook_user_login().
 */
function password_reset_user_login(&$edit, $account) {
  // When no e-mail verification or admin approval is required, the user is
  // logged into the site in user_register_submit without immediately bothering
  // with the rest of the #submit hooks. These hooks are engaged at a later
  // date. However, the drupal_goto() below can interrupt this flow.
  if (isset($edit['values']) && isset($edit['values']['password_reset'])) {
  }
  elseif (_password_reset_variable_get('redirect_user')) {
    $question = password_reset_user_question_get($account->uid);
    if ($question === FALSE) {
      drupal_set_message(t('Please choose a security question and answer for your account. This question will be used to verify your identity in case you ever forget your password.'));

      // Redirect user to edit page and preserve the existing destination,
      // if available.
      $destination = drupal_get_destination();
      unset($_REQUEST['destination'], $_POST['destination'], $_GET['destination']);
      drupal_goto('user/' . $account->uid . '/edit', $destination);
    }
  }
}

/**
 * Implements hook_user_delete().
 */
function password_reset_user_delete($account) {
  db_delete('password_reset_users')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Menu callback: A multi-step form to validate and reset the password for a
 * user.
 */
function password_reset_form($form, &$form_state) {
  global $base_url;
  drupal_add_js(drupal_get_path('module', 'password_reset') . '/password_reset.js');
  // $flood_limit = _password_reset_variable_get('flood_control');
  // $flood_limit = 100;

  // if ($flood_limit && !flood_is_allowed('password_reset', $flood_limit)) {
  //   $form['flood'] = array(
  //     '#type' => 'item',
  //     '#markup' => t('For security reasons, password reset attempts are limited to %limit per hour. Please try again later.', array('%limit' => $flood_limit))
  //   );

  //   return $form;
  // }

  $step = isset($form_state['storage']['step']) ? $form_state['storage']['step'] + 1 : 1;
  $form['step'] = array('#type' => 'value', '#value' => $step);

  switch ($step) {
    case 2:
      $user = user_load_by_name($form_state['values']['username']);
      $user_login = $user->login;

      if(empty($user)){
        $form['notify'] = array(
          '#type' => 'markup',
          '#markup' => 'Your username is invalid, please correct or <a href="'.$base_url.'/register" title="Create new Registration">create new registration</a>.'
        );
      } elseif($user->status == 0){
        $form['notify'] = array(
          '#type' => 'markup',
          '#markup' => 'Your account was blocked, please contact administer or <a href="'.$base_url.'/register" title="Create new Registration">create new registration</a>.'
        );
      } else{

        // Set content of email
        $signature = get_email_signature();

        $site_name = variable_get('site_name', '');
        $from = variable_get('site_mail', ini_get('sendmail_from'));
        $to = $user->mail;
        $link = user_pass_reset_url($user);

       $headers = 'MIME-Version: 1.0' . "\r\n".
        'Content-Type: text/html; charset=UTF-8' ."\r\n".
        'X-Priority: 1 '."\r\n".
        'From: Pexous Support <'.$from.'>'. "\r\n" .
        'Reply-To: '.$from . "\r\n" .
        'X-Mailer: PHP/' . phpversion();

        $subject = "Replacement login information for ".$user->name." at ".$site_name; // subject of e-mail
        
        $body .= $user->name.",<br><br>
          A request to reset the password for your account has been made at ".$site_name.".<br><br>
          You may now log in by clicking this link or copying and pasting it to your browser: <br><br>
          ".$link." <br><br>
          This link can only be used once to log in and will lead you to a page where you can set your password. It expires after one day and nothing will happen if it's not used.<br><br>
          ".$signature;
          
       
        if($user_login == 0){
          $form['notify'] = array(
            '#type' => 'markup',
            '#markup' => 'You have never logged in the system. Please check your email to login and change password, security questions.'
          ); 

          // mail($to, $subject, $body, $headers);
          gp_core_send_mail($from, 'Pexous Support', $to, $user->name, $subject, $body);

        } elseif ($user->pass == '') {
          $form['notify'] = array(
            '#type' => 'markup',
            '#markup' => 'You have never changed your password. Please check your email to login and change password, security questions.'
          );   

          // mail($to, $subject, $body, $headers);
          gp_core_send_mail($from, 'Pexous Support', $to, $user->name, $subject, $body);

        } else{
           
          $uid = $user && $user->status ? $user->uid : 0;

          // Try to retrieve the question for a valid user.
          $question = $uid ? password_reset_user_question_get($uid) : FALSE;

          if ($question === FALSE) {
            // Question not found, user does not exist or does not have a question
            // selected. We don't want to give any information away. So we select a
            // question using a checksum over the name for consistency (if we do a
            // random select, submitting the form twice will tell an attacker that
            // it is an invalid username).
            $questions = password_reset_questions_get();
            $count = count($questions);
            if ($count) {
              $checksum = crc32(drupal_strtolower($form_state['values']['username']));
              $keys = array_keys($questions);
              $qid = $keys[abs($checksum % $count)];

              $question = new stdClass();
              $question->qid = $qid;
              $question->question = $questions[$qid];
              // Reuse function to generate random answer for the invalid attempt.
              $question->answer = _password_reset_generate_fake_mail();
            }
          }
          
        }
      
      
   }

      if ($question) {       
        $form['username'] = array('#type' => 'value', '#value' => $form_state['values']['username']);
        $form['uid'] = array('#type' => 'value', '#value' => $uid);
        $form['question_object'] = array('#type' => 'value', '#value' => $question);
				//First Question
        $form['first_question'] = array(
          '#type' => 'item',
          '#title' => t('Security question'),
          '#prefix' => '<div id="wrap-security-questions">',
          '#markup' => t('%question', array('%question' => $question[0]->question))
        );
        $form['first_answer'] = array(
          '#type' => 'textfield',
          '#title' => t('Answer'),
          '#description' => t('Enter the answer to the above question.'),
          '#attributes' => array('class'=> array('validate[required]')),
        );
				
				//Second Question
				 $form['second_question'] = array(
          '#type' => 'item',
          '#markup' => t('%question', array('%question' => $question[1]->question))
        );
        $form['second_answer'] = array(
          '#type' => 'textfield',
          '#title' => t('Answer'),
          '#description' => t('Enter the answer to the above question.'),
          '#attributes' => array('class'=> array('validate[required]')),
        );
				
				//Third Question
				 $form['third_question'] = array(
          '#type' => 'item',
          '#markup' => t('%question', array('%question' => $question[2]->question))
        );
        $form['third_answer'] = array(
          '#type' => 'textfield',
          '#title' => t('Answer'),
          '#description' => t('Enter the answer to the above question.'),
          '#attributes' => array('class'=> array('validate[required]')),
        );
				
				
        $form['operation'] = array(
          '#type' => 'submit',
          '#value' => t('Next'),
          '#suffix' => '</div>',
          '#weight' => 3
        );


        $form['select_option'] = array(
          '#type' => 'markup',
          '#markup' => '              
              <div class="wrapper-select-option">
              <h3>Select method reset password:</h3>
              <span class="send-email"><input type="hidden" value="'.$uid.'" id="hidden-uid" /><input type="radio" name="select_option" value="send_email" id="send-email"/><span class="title">Send reset password link to your email</span></span>
              <span class="answer-question"><input type="radio" name="select_option" value="answer_question" id="answer-question"/><span class="title">Answer Your Security Questions</span><span>',
          '#weight' => 6
        );

      }

      break;
    case 3:
      // Use user_load() here as user_pass_reset_url() requires the user object.
      // $account = user_load($form_state['values']['uid']);
    drupal_set_title('New Password');
      $form['password_confirm'] = array(
        '#type' => 'password_confirm',  
        '#size' => 25,
        '#maxlength' => 64,
      );

      $form['save'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),     
      '#submit' => array('gp_save_new_pass'),
      '#attributes' => array(
        'class' => array('btn','btn-primary')
      ),
      '#suffix' => '<input type="hidden" name="hidden_uid" value="'.$form_state['values']['uid'].'" />'
    );

      // $reset_url = l(t('Click here'), user_pass_reset_url($account));
      // $form['content'] = array(
      //   '#type' => 'item',
      //   '#markup' => t('A one-time login link has been created. !click-here to reset your password.', array('!click-here' => $reset_url))
      // );

      // watchdog('user', 'One-time login link created for %username (uid: !uid).', array('%username' => $account->name, '!uid' => $account->uid), WATCHDOG_NOTICE, l(t('View'), 'user/' . $account->uid));
      break;
    default:
      $form['username'] = array(
        '#type' => 'textfield',
        '#title' => t('Username'),
        '#description' => t('Enter the username that you use on this site.'),
        '#required' => TRUE
      );
      $form['operation'] = array(
        '#type' => 'submit',
        '#value' => t('Next'),
        '#weight' => 2
      );
    break;
  }

  return $form;
}


/**
 * Update new password and redirect to Company landing page / custom by mkchen
 */
function gp_save_new_pass($form, &$form_state){
  global $base_url;
  //this gets the root of the drupal installation
  define('DRUPAL_ROOT', getcwd());
  //require the bootstrap include
  require_once './includes/bootstrap.inc';
  //Load Drupal
  drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');

  $uid = $_POST['hidden_uid'];
  $user_account = user_load($uid);
  $pass = $_POST['password_confirm']['pass1'];
  
  $edit = array();
  $edit['pass'] = $pass;
  if(user_save($user_account, $edit)){

      // Auto login     
      $user_account = user_authenticate($user_account->name, $pass);
      $user = user_load($user_account, TRUE);
      $login_status = drupal_session_regenerate();

      // drupal_set_message(t('Your password has been updated successfully, you are now logged in.'), 'status');
      // drupal_goto($base_url.'/user/'.$user->uid.'/company');

      drupal_set_message(t('Your password has been updated successfully.'), 'status');
      drupal_goto($base_url);
      
  } else {
      drupal_set_message(t('Your password has not been updated successfully, please try again.'), 'error');
      drupal_goto($base_url.'/user/password');
  }

}


/**
 * Send reset link to user email / custom by mkchen
 */
function send_reset_link($form, &$form_state){
  global $base_url;
  $uid = $_GET['uid'];
  if(is_numeric($uid)){
    $user = user_load($uid);    
    
    // Set content of email
    $signature = get_email_signature();
    $site_name = variable_get('site_name', '');
    $from = variable_get('site_mail', ini_get('sendmail_from'));
    $to = $user->mail;
    $link = user_pass_reset_url($user);

     $headers = 'MIME-Version: 1.0' . "\r\n".
      'Content-Type: text/html; charset=UTF-8' ."\r\n".
      'X-Priority: 1 '."\r\n".
      'From: Pexous Support <'.$from.'>'. "\r\n" .
      'Reply-To: '.$from . "\r\n" .
      'X-Mailer: PHP/' . phpversion();
      
    $subject = "Replacement login information for ".$user->name." at ".$site_name; // subject of e-mail
    
    $body .= $user->name.",<br><br>
      A request to reset the password for your account has been made at ".$site_name.".<br><br>
      You may now log in by clicking this link or copying and pasting it to your browser: <br><br>
      ".$link." <br><br>
      This link can only be used once to log in and will lead you to a page where you can set your password. It expires after one day and nothing will happen if it's not used.<br><br>
      ".$signature;

    // mail($to, $subject, $body, $headers);
    gp_core_send_mail($from, 'Pexous Support', $to, $user->name, $subject, $body);

    drupal_set_message(t('The reset password link has sent to your email.'), 'status');
  } else {
    drupal_set_message(t('The account is invalid.'), 'error');
  }
  drupal_goto($base_url);
}

/**
 * Validate password_reset_form submissions.
 *
 * @todo Consider if user_needs_new_hash() might be necessary here.
 */
function password_reset_form_validate($form, &$form_state) {
  // Do not validate the username for step = 1, as we don't want to give away
  // the information that a username is (in)valid.
  if ($form_state['values']['step'] == 2) {
    // If this is a flood, redirect the user to Step 1 which should disable the
    // form.
    // $flood_limit = _password_reset_variable_get('flood_control');
    // if ($flood_limit && !flood_is_allowed('password_reset', $flood_limit)) {
    //   drupal_goto('user/password');
    // }

    $uid = $form_state['values']['uid'];
    $question = $form_state['values']['question_object'];
		$first_answer = _password_reset_answer_sanitise($form_state['values']['first_answer']);
		$second_answer = _password_reset_answer_sanitise($form_state['values']['second_answer']);
		$third_answer = _password_reset_answer_sanitise($form_state['values']['third_answer']);
		
    $first_answer = _password_reset_answer_encase($first_answer, $question[0]->qid);
		$second_answer = _password_reset_answer_encase($second_answer, $question[1]->qid);
		$third_answer = _password_reset_answer_encase($third_answer, $question[2]->qid);

    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');

    if (!$question || strcmp($question[0]->answer, $first_answer) || strcmp($question[1]->answer, $second_answer) || strcmp($question[2]->answer, $third_answer)) {
      form_set_error('answer', t('Answer incorrect. Please check and try again.')); 
      drupal_add_js('jQuery(document).ready(function () { jQuery(".wrapper-select-option").hide(); });', 'inline');
    }

    flood_register_event('password_reset');
  }
}

/**
 * Process password_reset_form submissions.
 */
function password_reset_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $form_state['storage']['step'] = $form_state['values']['step'];
}

/**
 * Inject password reset question elements into form.
 */
function password_reset_form_inject(&$form) {
  $form['password_reset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Security question'),
    '#description' => t('To reset your password in case you have forgotten it, a security question will be asked to verify your identity.'),
    '#tree' => TRUE,
    '#collapsible' => TRUE
  );
  
	//First Question
	$form['password_reset']['first_question'] = array(
    '#type' => 'select',
    '#title' => t('First Question'),
    '#description' => t('Choose the question that you would like asked.'),
    '#options' => password_reset_questions_get(),
    '#required' => TRUE
  );
  $form['password_reset']['first_answer'] = array(
    '#type' => 'textfield',
    '#title' => t('First Answer'),
    '#description' => t('Type the answer to the question you have chosen.'),
    '#maxlength' => 255,
    '#required' => TRUE
  );
	$form['password_reset']['first_qruid_hidden'] = array(
    '#type' => 'hidden',
    '#maxlength' => 255
  );
	
	//Second Question
	$form['password_reset']['second_question'] = array(
    '#type' => 'select',
    '#title' => t('Second Question'),
    '#description' => t('Choose the question that you would like asked.'),
    '#options' => password_reset_questions_get(),
    '#required' => TRUE
  );
  $form['password_reset']['second_answer'] = array(
    '#type' => 'textfield',
    '#title' => t('Second Answer'),
    '#description' => t('Type the answer to the question you have chosen.'),
    '#maxlength' => 255,
    '#required' => TRUE
  );
	$form['password_reset']['second_qruid_hidden'] = array(
    '#type' => 'hidden',
    '#maxlength' => 255
  );
	
	//Third Question
	$form['password_reset']['third_question'] = array(
    '#type' => 'select',
    '#title' => t('Third Question'),
    '#description' => t('Choose the question that you would like asked.'),
    '#options' => password_reset_questions_get(),
    '#required' => TRUE
  );
  $form['password_reset']['third_answer'] = array(
    '#type' => 'textfield',
    '#title' => t('Third Answer'),
    '#description' => t('Type the answer to the question you have chosen.'),
    '#maxlength' => 255,
    '#required' => TRUE
  );
	$form['password_reset']['third_qruid_hidden'] = array(
    '#type' => 'hidden',
    '#maxlength' => 255
  );

  $form['#validate'][] = 'password_reset_user_form_validate';
  $form['#submit'][] = 'password_reset_user_form_submit';
}

/**
 * Save the answer to a security question.
 *
 * @param Array $record
 *   An array containing answer information formatted for drupal_write_record().
 * @param Array $update
 *   In case of an update, add the key, else leave empty.
 * @return $status
 *   Status variable as per drupal_write_record.
 */
function password_reset_answer_add($record, $update = array()) {
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
 // $record['answer'] = user_hash_password($record['answer']);

  return drupal_write_record('password_reset_users', $record, $update);
}

/**
 * Delete a security question.
 *
 * @param Array $question
 *   An array containing question information.
 */
function password_reset_question_delete($question) {
  db_delete('password_reset')
    ->condition('qid', $question['qid'])
    ->execute();
  password_reset_question_empty($question);

  watchdog('user', 'Security question %question deleted.', array('%question' => $question['question']));
}

/**
 * Empty all use of a security question.
 *
 * @param Array $question
 *   An array containing question information.
 */
function password_reset_question_empty($question) {
  db_delete('password_reset_users')
    ->condition('qid', $question['qid'])
    ->execute();

  watchdog('user', 'Security question %question emptied.', array('%question' => $question['question']));
}

/**
 * Retrieve all available questions.
 */
function password_reset_questions_get() {
  return db_query('SELECT qid, question FROM {password_reset} ORDER BY question')->fetchAllKeyed();
}

/**
 * Retrieve a particular question.
 *
 * @param $qid
 *   The ID of the question to retrieve.
 * @return
 *   A question object.
 */
function password_reset_question_get($qid, $count = FALSE) {
  if ($count) {
    return db_query('SELECT pr.*, COUNT(pru.qid) as total FROM {password_reset} pr LEFT JOIN {password_reset_users} pru USING (qid) WHERE pr.qid = :qid GROUP BY pr.qid', array(':qid' => $qid))->fetchObject();
  }
  else {
    return db_query('SELECT * FROM {password_reset} WHERE qid = :qid', array(':qid' => $qid))->fetchObject();
  }
}

/**
 * Retrieve question and answer specific to a user.
 */
function password_reset_user_question_get($uid) {
  return db_query('SELECT pr.qid, pr.question, pru.qruid, pru.answer
    FROM {password_reset_users} pru
    LEFT JOIN {password_reset} pr USING (qid)
    WHERE pru.uid = :uid', array(':uid' => $uid))
    ->fetchAll();
}

/**
 * Helper function to check if it's an admin managing an unprivileged user.
 *
 * @param Array $form
 *   The form array.
 * @return Boolean
 *   TRUE if it's an admin viewing a user's account page. FALSE otherwise.
 */
function _password_reset_user_admin_check($form) {
  $uid = $form['#user']->uid;

  return $uid != $GLOBALS['user']->uid && user_access('administer users');
}

/**
 * Helper function to check if the user's answer matches the hashed version
 * stored in the database.
 *
 * @param String $hash
 *   The hashed answer stored in the database.
 * @param String $input
 *   The answer provided by the user.
 * @return Boolean
 *   TRUE if it's a match and FALSE otherwise.
 */
function _password_reset_answer_check($hash, $input) {
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');

  $input = _password_reset_answer_sanitise($input);

  // The function expects a user object. Hack.
  $account = new stdClass();
  $account->pass = $hash;

  return user_check_password($input, $account);
}

/**
 * Helper function to clean up the user's input prior to saving it or checking it
 * against the stored version.
 *
 * @param String $answer
 *   The user's input.
 * @return String
 *   A sanitised version of the answer.
 */
function _password_reset_answer_sanitise($answer) {
  return trim($answer);
}

/**
 * Helper function to lowercase the answer if the option is enabled.
 *
 * @param String $answer
 *   The user's input.
 * @param Integer $qid
 *   The question ID.
 * @return String
 *   An appropriately case version of the answer.
 */
function _password_reset_answer_encase($answer, $qid) {
  $question = password_reset_question_get($qid);

  return $question->case_sensitive ? $answer : drupal_strtolower($answer);
}

/**
 * Helper function to perform a regex match for a string.
 *
 * @param String $pattern
 *   The regular expression pattern.
 * @param Integer $subject
 *   The string to apply the pattern to.
 * @return Integer
 *   The number of matches or FALSE if an error.
 */
function _password_reset_regex_match($pattern, $subject) {
  return preg_match($pattern, $subject);
}

/**
 * Implements hook_mail().
 */
function password_reset_mail($key, &$message, $params) {
    /*
   *  $account = $params['account'];
   *  $context = $params['context'];
   *  $variables = array(
   *    '%site_name' => variable_get('site_name', 'Drupal'),
   *    '%username' => format_username($account),
   *  );
   *  if ($context['hook'] == 'taxonomy') {
   *    $entity = $params['entity'];
   *    $vocabulary = taxonomy_vocabulary_load($entity->vid);
   *    $variables += array(
   *      '%term_name' => $entity->name,
   *      '%term_description' => $entity->description,
   *      '%term_id' => $entity->tid,
   *      '%vocabulary_name' => $vocabulary->name,
   *      '%vocabulary_description' => $vocabulary->description,
   *      '%vocabulary_id' => $vocabulary->vid,
   *    );
   *  }
   *
   *  // Node-based variable translation is only available if we have a node.
   *  if (isset($params['node'])) {
   *    $node = $params['node'];
   *    $variables += array(
   *      '%uid' => $node->uid,
   *      '%node_url' => url('node/' . $node->nid, array('absolute' => TRUE)),
   *      '%node_type' => node_type_get_name($node),
   *      '%title' => $node->title,
   *      '%teaser' => $node->teaser,
   *      '%body' => $node->body,
   *    );
   *  }
   *  $subject = strtr($context['subject'], $variables);
   *  $body = strtr($context['message'], $variables);
   *  $message['subject'] .= str_replace(array("\r", "\n"), '', $subject);
   *  $message['body'][] = drupal_html_to_text($body);
   */
   // TODO: stuff needs moving here from above function!
  switch ($key) {
    case 'information':
      // $language = $message['language'];
      $message['subject'] = $params['subject'];
      $message["body"] = array($params["body"]);
      break;
  }
}

/**
 * Helper function to generate a fake (but unique) e-mail address.
 *
 * @return String
 *   The fake e-mail address.
 */
function _password_reset_generate_fake_mail() {
  // A black hole address.
  return uniqid('password_reset_fake_') . '@example.com';
}

/**
 * Return a Password reset module variable.
 *
 * @param $name
 *   The name of the variable to retrieve. If not set, then all variables are
 *   returned.
 * @param $reset
 *   Reset the static variables array to ensure that its value is not outdated.
 * @return
 *   The value of the variable(s) requested.
 */
function _password_reset_variable_get($name = NULL, $reset = FALSE) {
  static $variables = array();

  if ($reset) {
    $variables = array();
  }

  if (empty($variables)) {
    $defaults = array(
      'email_registration' => TRUE,
      'email_profile' => TRUE,
      'flood_control' => 3,
      'password_verify' => TRUE,
      'redirect_user' => TRUE,
      'registration_form' => TRUE
    );
    $variables = variable_get('password_reset', array());
    $variables = array_merge($defaults, $variables);
  }

  return $name ? $variables[$name] : $variables;
}

/**
 * Set a Password reset module variable. This is used by Simpletest.
 *
 * @param $name
 *   The name of the variable to set.
 * @param $value
 *   The value to set the variable to.
 */
function _password_reset_variable_set($name, $value) {
  $variables = _password_reset_variable_get();
  $variables[$name] = $value;

  $variables = variable_set('password_reset', $variables);

  // Clear static cache.
  _password_reset_variable_get(NULL, TRUE);
}
